intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import intf_libs += libimgui-platform-win32%lib{imgui-platform-win32}
import intf_libs += libimgui-render-dx9%lib{imgui-render-dx9}
import intf_libs += libboost-stacktrace%lib{boost_stacktrace}

lib{iw4x}: {hxx ixx txx cxx}{* -version} \
           {hxx            }{   version} \
           {def            }{*         } \
           $impl_libs $intf_libs

lib{iw4x}: libul{iw4x}: {hxx ixx txx cxx}{utility/**} $impl_libs $intf_libs

# The `version.hxx` header is generated from the `version.in` template during
# the build. As libiw4x source is meant to be distributable (and not just
# buildable from VCS), we also include this generated header in the source
# distribution tarball.
#
# The reasoning here is simple: when someone builds from a release archive, they
# should not need to regenerate `version.hxx` (which would require `b` to re-run
# the template processing logic). Instead, they can pick up the one we already
# generated at release time. This guarantees that the distributed code compiles
# "as shipped" without any auxiliary generation steps.
#
# There is also a subtler, defensive reason: by marking this header as `dist =
# true` we make sure that when building from an unpacked distribution we never
# accidentally pick up a *different* `version.hxx` from some prior installation
# in the system include path.
#
# Finally, we mark it `clean = ($src_root != $out_root)` so that `b clean`
# inside the source tree does not delete it. That way, the post-clean state of a
# source tree matches exactly what we would ship in a distribution archive.
#
hxx{version}: in{version} $src_root/manifest
hxx{version}:
{
  dist = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

if ($config.libiw4x.develop)
  cxx.poptions =+ "-DLIBIW4X_DEVELOP"

obja{*}: cxx.poptions += -DLIBIW4X_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBIW4X_SHARED_BUILD

if ($cxx.target.class == 'windows')
{
  if ($cxx.target.system == 'mingw32')
    cxx.libs += -ldbghelp
  else
    cxx.libs += dbghelp.lib
}

# Export options.
#
lib{iw4x}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{iw4x}: cxx.export.poptions += -DLIBIW4X_STATIC
libs{iw4x}: cxx.export.poptions += -DLIBIW4X_SHARED

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{iw4x}: bin.lib.version = "-$version.project_id"
else
  lib{iw4x}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libiw4x/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libiw4x/
  install.subdirs = true
}
