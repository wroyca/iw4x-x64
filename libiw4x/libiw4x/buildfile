intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import intf_libs += libboost-core%lib{boost_core}
import intf_libs += libboost-signals2%lib{boost_signals2}
import intf_libs += libimgui-render-dx9-docking%lib{imgui-render-dx9-docking}
import intf_libs += libimgui-platform-win32-docking%lib{imgui-platform-win32-docking}

lib{iw4x}: {hxx ixx txx cxx}{** -version} \
           {hxx            }{    version} \
           $impl_libs $intf_libs

# On Windows, build2 defaults to dropping the 'lib' prefix from library names,
# since the platform itself does not conventionally use it. Normally that's
# harmless, but in our case the name must stay intact: iw4mp has been patched
# to look for libiw4x.dll explicitly. If build2 were allowed to "correct" the
# name, the import would fail at runtime.
#
lib{iw4x}: bin.lib.prefix = "lib"

# The `version.hxx` header is generated from the `version.in` template during
# the build. As libiw4x source is meant to be distributable (and not just
# buildable from VCS), we also include this generated header in the source
# distribution tarball.
#
hxx{version}: in{version} $src_root/manifest
hxx{version}:
{
  dist = true
  clean = ($src_root != $out_root)
  backlink = overwrite
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: cxx.poptions += -DLIBIW4X_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBIW4X_SHARED_BUILD

# Export options.
#
lib{iw4x}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{iw4x}: cxx.export.poptions += -DLIBIW4X_STATIC
libs{iw4x}: cxx.export.poptions += -DLIBIW4X_SHARED
